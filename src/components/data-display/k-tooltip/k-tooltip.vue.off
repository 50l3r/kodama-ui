<template>
    <component :is="tag" :id="buttonId" v-bind="$attrs">
        <slot></slot>
    </component>

    <div :id="tooltipId" class="hidden">
        <template v-if="hasSlot('content')">
            <slot name="content"></slot>
        </template>
        <template v-else>
            {{ title }}
        </template>
    </div>
</template>

<script lang="ts">
    import tippy from 'tippy.js'
    import { defineComponent, onMounted, ref, watch } from 'vue'
    import { uid } from '../../../helpers/utils'

    export type KTooltipPlacement =
        | 'top'
        | 'top-start'
        | 'top-end'
        | 'right'
        | 'right-start'
        | 'right-end'
        | 'bottom'
        | 'bottom-start'
        | 'bottom-end'
        | 'left'
        | 'left-start'
        | 'left-end'
        | 'auto'
        | 'auto-start'
        | 'auto-end'

    export const KTooltipPlacementOptions = [
        'top',
        'top-start',
        'top-end',
        'right',
        'right-start',
        'right-end',
        'bottom',
        'bottom-start',
        'bottom-end',
        'left',
        'left-start',
        'left-end',
        'auto',
        'auto-start',
        'auto-end'
    ]

    export default defineComponent({
        name: 'KTooltip',
        props: {
            title: {
                type: String,
                default: ''
            },
            placement: {
                type: String as () => KTooltipPlacement,
                default: 'auto',
                options: KTooltipPlacementOptions
            },
            hover: {
                type: Boolean,
                default: true
            },
            click: {
                type: Boolean,
                default: false
            },
            visible: {
                type: Boolean,
                default: undefined
            },
            disabled: {
                type: Boolean,
                default: false
            },
            html: {
                type: Boolean,
                default: false
            },
            tag: {
                type: String,
                default: 'span'
            },
            arrow: {
                type: Boolean,
                default: true
            },
            theme: {
                type: String,
                default: 'kodama'
            },
            interactive: {
                type: Boolean,
                default: false
            },
            hideOnClick: {
                type: Boolean,
                default: true
            },
            maxWidth: {
                type: Number,
                default: 350
            }
        },
        setup(props, { slots }) {
            const tooltipId = uid()
            const buttonId = uid()

            const tooltip = ref<any>(null)
            const hasSlot = (name: string) => !!slots[name]

            const method =
                props.visible !== undefined
                    ? 'manual'
                    : props.click
                    ? 'click'
                    : props.hover
                    ? 'mouseenter'
                    : 'manual'

            const init = () => {
                const slot =
                    document.getElementById(`${tooltipId}`)?.innerHTML || ''

                tooltip.value = tippy(`#${buttonId}`, {
                    animation: 'scale',
                    arrow: props.arrow,
                    content: props.title ? props.title : slot,
                    allowHTML: props.html,
                    placement: props.placement,
                    trigger: method,
                    hideOnClick: props.hideOnClick,
                    maxWidth: props.maxWidth,
                    interactive: props.interactive,
                    theme: props.theme,
                    appendTo: document.body
                })[0]

                console.log(tooltip.value)

                if (props.disabled) {
                    tooltip.value?.disable()
                }
            }

            onMounted(() => {
                init()
            })

            watch(
                () => props.visible,
                (value) => {
                    if (value) {
                        console.log(tooltip.value)
                        tooltip.value?.show()
                    } else {
                        tooltip.value?.hide()
                    }
                }
            )

            watch(
                () => props.disabled,
                (value) => {
                    if (value) {
                        tooltip.value?.disable()
                    } else {
                        tooltip.value?.enable()
                    }
                }
            )

            return { tooltipId, buttonId, hasSlot }
        }
    })
</script>

<style lang="scss">
    .tippy-box[data-theme~='kodama'] {
        @apply bg-gray-900 dark:bg-primary dark:text-white;

        .tippy-arrow:before {
            @apply text-gray-900 dark:text-primary;
        }
    }

    .tippy-box[data-theme~='dropdown'] {
        @apply bg-transparent text-white;

        .tippy-arrow:before {
            @apply text-gray-900;
        }

        .tippy-content {
            @apply p-0 bg-transparent;
        }
    }
</style>
