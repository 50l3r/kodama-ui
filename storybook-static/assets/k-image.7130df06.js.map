{"version":3,"file":"k-image.7130df06.js","sources":["../../src/components/data-display/k-image/k-image.vue","../../src/components/data-display/k-image/k-image.vue"],"sourcesContent":["<template>\r\n    <div class=\"k-thumbnail\" :style=\"style\">\r\n        <img ref=\"img\" :src=\"src\" data-zoom :style=\"styleImg\" />\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import { defineComponent, computed, onMounted, ref } from 'vue'\r\n    import mediumZoom from 'medium-zoom'\r\n\r\n    export default defineComponent({\r\n        name: 'KThumbnail',\r\n        autoload: true,\r\n        props: {\r\n            src: {\r\n                type: String,\r\n                default: '',\r\n                description: 'Url de la imagen'\r\n            },\r\n            size: {\r\n                type: Number,\r\n                default: 80,\r\n                description: 'Tamaño en px'\r\n            },\r\n            zoom: {\r\n                type: Boolean,\r\n                default: true,\r\n                description: 'Zoom'\r\n            }\r\n        },\r\n        setup(props) {\r\n            const img = ref()\r\n\r\n            const style = computed(() => {\r\n                const s: any = {}\r\n\r\n                s.height = `${props.size}px`\r\n                s.width = `${props.size}px`\r\n\r\n                return s\r\n            })\r\n\r\n            const styleImg = computed(() => {\r\n                const s: any = {}\r\n\r\n                s.maxHeight = `${props.size * 2}px`\r\n                s.maxWidth = `${props.size * 2}px`\r\n\r\n                return s\r\n            })\r\n\r\n            onMounted(() => {\r\n                if (props.zoom)\r\n                    mediumZoom(img.value, {\r\n                        background: 'rgba(0, 0, 0, 0.8)'\r\n                    })\r\n            })\r\n\r\n            return { img, style, styleImg }\r\n        }\r\n    })\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n    .k-thumbnail {\r\n        @apply bg-white overflow-hidden rounded-xl flex items-center justify-center transition-all aspect-square;\r\n\r\n        img {\r\n            @apply h-full object-cover;\r\n        }\r\n    }\r\n\r\n    .k-thumbnail:hover {\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    .medium-zoom-overlay {\r\n        z-index: 99;\r\n    }\r\n\r\n    .medium-zoom-image--opened {\r\n        z-index: 100;\r\n        // width: auto !important;\r\n    }\r\n</style>\r\n","<template>\r\n    <div class=\"k-thumbnail\" :style=\"style\">\r\n        <img ref=\"img\" :src=\"src\" data-zoom :style=\"styleImg\" />\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import { defineComponent, computed, onMounted, ref } from 'vue'\r\n    import mediumZoom from 'medium-zoom'\r\n\r\n    export default defineComponent({\r\n        name: 'KThumbnail',\r\n        autoload: true,\r\n        props: {\r\n            src: {\r\n                type: String,\r\n                default: '',\r\n                description: 'Url de la imagen'\r\n            },\r\n            size: {\r\n                type: Number,\r\n                default: 80,\r\n                description: 'Tamaño en px'\r\n            },\r\n            zoom: {\r\n                type: Boolean,\r\n                default: true,\r\n                description: 'Zoom'\r\n            }\r\n        },\r\n        setup(props) {\r\n            const img = ref()\r\n\r\n            const style = computed(() => {\r\n                const s: any = {}\r\n\r\n                s.height = `${props.size}px`\r\n                s.width = `${props.size}px`\r\n\r\n                return s\r\n            })\r\n\r\n            const styleImg = computed(() => {\r\n                const s: any = {}\r\n\r\n                s.maxHeight = `${props.size * 2}px`\r\n                s.maxWidth = `${props.size * 2}px`\r\n\r\n                return s\r\n            })\r\n\r\n            onMounted(() => {\r\n                if (props.zoom)\r\n                    mediumZoom(img.value, {\r\n                        background: 'rgba(0, 0, 0, 0.8)'\r\n                    })\r\n            })\r\n\r\n            return { img, style, styleImg }\r\n        }\r\n    })\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n    .k-thumbnail {\r\n        @apply bg-white overflow-hidden rounded-xl flex items-center justify-center transition-all aspect-square;\r\n\r\n        img {\r\n            @apply h-full object-cover;\r\n        }\r\n    }\r\n\r\n    .k-thumbnail:hover {\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    .medium-zoom-overlay {\r\n        z-index: 99;\r\n    }\r\n\r\n    .medium-zoom-image--opened {\r\n        z-index: 100;\r\n        // width: auto !important;\r\n    }\r\n</style>\r\n"],"names":["_sfc_main","defineComponent","props","img","ref","style","computed","s","styleImg","onMounted","mediumZoom","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createElementBlock","_normalizeStyle","_createElementVNode","__name"],"mappings":"gSAUI,MAAAA,EAAeC,EAAgB,CAC3B,KAAM,aACN,SAAU,GACV,MAAO,CACH,IAAK,CACD,KAAM,OACN,QAAS,GACT,YAAa,kBACjB,EACA,KAAM,CACF,KAAM,OACN,QAAS,GACT,YAAa,iBACjB,EACA,KAAM,CACF,KAAM,QACN,QAAS,GACT,YAAa,MACjB,CACJ,EACA,MAAMC,EAAO,CACT,MAAMC,EAAMC,IAENC,EAAQC,EAAS,IAAM,CACzB,MAAMC,EAAS,CAAA,EAEb,OAAAA,EAAA,OAAS,GAAGL,EAAM,SAClBK,EAAA,MAAQ,GAAGL,EAAM,SAEZK,CAAA,CACV,EAEKC,EAAWF,EAAS,IAAM,CAC5B,MAAMC,EAAS,CAAA,EAEb,OAAAA,EAAA,UAAY,GAAGL,EAAM,KAAO,MAC5BK,EAAA,SAAW,GAAGL,EAAM,KAAO,MAEtBK,CAAA,CACV,EAED,OAAAE,EAAU,IAAM,CACRP,EAAM,MACNQ,EAAWP,EAAI,MAAO,CAClB,WAAY,oBAAA,CACf,CAAA,CACR,EAEM,CAAE,IAAAA,EAAK,MAAAE,EAAO,SAAAG,EACzB,CACJ,CAAC,kBC3DS,SAAAG,EAACC,EAAaC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,QAAOC,EAAO,EAAAC,EAAA,MAAA,CAAA,MAAA,cAClC,MAAwDC,EAAAR,EAAA,KAAA,CAAA,EAAA,CAAhCS,EAAA,MAAA,CAAE,IAAA,MAAW,IAAKT,EAAA,IAAA,YAAA,uCADpCU,EAAAX,EAAA"}