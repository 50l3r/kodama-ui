{"version":3,"file":"k-input.6d2af098.js","sources":["../../src/components/data-entry/k-input/k-input.vue","../../src/components/data-entry/k-input/k-input.vue"],"sourcesContent":["<template>\r\n    <div :class=\"classes\">\r\n        <label v-if=\"hasLabel && !float\" :for=\"uuid\">\r\n            <slot v-if=\"hasSlot('default')\" />\r\n            <template v-else>{{ label }}</template>\r\n\r\n            <span v-if=\"required\" class=\"font-bold text-danger ml-1\">*</span>\r\n            <template v-if=\"firstError\">\r\n                <k-tooltip hover :title=\"firstError\">\r\n                    <k-icon icon=\"triangle-exclamation\" class=\"ml-2\" />\r\n                </k-tooltip>\r\n            </template>\r\n        </label>\r\n\r\n        <input\r\n            :id=\"uuid\"\r\n            :type=\"type\"\r\n            :maxlength=\"maxLength\"\r\n            :placeholder=\"placeholderText\"\r\n            :required=\"required\"\r\n            :value=\"model\"\r\n            :min=\"min\"\r\n            :max=\"max\"\r\n            :style=\"style\"\r\n            @input=\"change\"\r\n        />\r\n\r\n        <div v-if=\"type === 'number'\" class=\"k-input-control\">\r\n            <div @click=\"sum()\">\r\n                <k-icon icon=\"plus\" type=\"fas\" class=\"k-input-icon\" />\r\n            </div>\r\n            <div @click=\"subtract()\">\r\n                <k-icon icon=\"minus\" type=\"fas\" class=\"k-input-icon\" />\r\n            </div>\r\n        </div>\r\n\r\n        <label v-if=\"hasLabel && float\" :for=\"uuid\">\r\n            <slot v-if=\"hasSlot('default')\" />\r\n            <template v-else>{{ label || placeholder }}</template>\r\n\r\n            <span v-if=\"required\" class=\"font-bold text-danger ml-1\">*</span>\r\n\r\n            <template v-if=\"firstError\">\r\n                <k-tooltip hover :title=\"firstError\">\r\n                    <k-icon icon=\"triangle-exclamation\" class=\"ml-2\" />\r\n                </k-tooltip>\r\n            </template>\r\n        </label>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import { computed, defineComponent, PropType } from 'vue'\r\n    import { ErrorObject } from '@vuelidate/core'\r\n    import { uid } from '@/helpers/utils'\r\n\r\n    export default defineComponent({\r\n        name: 'KInput',\r\n        props: {\r\n            modelValue: {\r\n                type: [String, Number],\r\n                required: false,\r\n                default: '',\r\n                description: 'Valor del componente'\r\n            },\r\n            id: {\r\n                type: String,\r\n                required: false,\r\n                default: '',\r\n                description: 'ID único'\r\n            },\r\n            maxlength: {\r\n                type: Number,\r\n                required: false,\r\n                default: 0,\r\n                description: 'Longitud máxima'\r\n            },\r\n            placeholder: {\r\n                type: String,\r\n                required: false,\r\n                default: '',\r\n                description: 'Texto explicativo'\r\n            },\r\n            required: {\r\n                type: Boolean,\r\n                default: false,\r\n                description: 'Indica si el campo es requerido'\r\n            },\r\n            label: {\r\n                type: String,\r\n                required: false,\r\n                default: '',\r\n                description: 'Etiqueta de definición'\r\n            },\r\n            size: {\r\n                type: String,\r\n                default: 'md',\r\n                options: ['xs', 'sm', 'md', 'lg']\r\n            },\r\n            float: {\r\n                type: Boolean,\r\n                default: false,\r\n                description: 'Indica si el input tiene estilo flotante'\r\n            },\r\n            fieldset: {\r\n                type: Boolean,\r\n                default: false,\r\n                description: 'Indica si el input tiene estilo fieldset'\r\n            },\r\n            errors: {\r\n                type: Array as PropType<ErrorObject[]>,\r\n                required: false,\r\n                default: () => [],\r\n                description: 'Errores de validación'\r\n            },\r\n            status: {\r\n                type: String,\r\n                default: '',\r\n                options: ['warning', 'success', 'danger'],\r\n                description: 'Color de estado del input'\r\n            },\r\n            type: {\r\n                type: String,\r\n                default: 'text',\r\n                options: ['text', 'password', 'number', 'email']\r\n            },\r\n            width: {\r\n                type: Number,\r\n                default: 0,\r\n                description: 'Ancho del input'\r\n            },\r\n            min: {\r\n                type: Number,\r\n                required: false,\r\n                description: 'Valor mínimo si el input es `number`'\r\n            },\r\n            max: {\r\n                type: Number,\r\n                required: false,\r\n                description: 'Valor máximo si el input es `number`'\r\n            }\r\n        },\r\n        emits: ['update:modelValue'],\r\n        setup(props, ctx) {\r\n            const maxLength = props.maxlength > 0 ? props.maxlength : undefined\r\n            const uuid = props.id || uid()\r\n            const hasSlot = (name: string) => !!ctx.slots[name]\r\n\r\n            const model = computed({\r\n                get() {\r\n                    return props.modelValue\r\n                },\r\n                set(value: any) {\r\n                    ctx.emit('update:modelValue', value)\r\n                }\r\n            })\r\n\r\n            const classes = computed(() => {\r\n                const classes = ['k-input-text', `k-input-text-${props.size}`]\r\n\r\n                if (props.float) {\r\n                    classes.push('k-input-text-floating')\r\n                } else if (props.fieldset) {\r\n                    classes.push('k-input-text-fieldset')\r\n                }\r\n\r\n                if (props.type === 'number') {\r\n                    classes.push('k-input-number')\r\n                }\r\n\r\n                if (props.errors.length > 0) {\r\n                    classes.push('k-input-text-danger')\r\n                } else if (props.status) {\r\n                    classes.push(`k-input-text-${props.status}`)\r\n                }\r\n\r\n                return classes\r\n            })\r\n\r\n            const style = computed(() => {\r\n                const style: any = {}\r\n\r\n                if (props.width > 0) {\r\n                    style['width'] = props.width + 'px'\r\n                }\r\n\r\n                return style\r\n            })\r\n\r\n            const hasLabel = computed(() => {\r\n                return props.label || hasSlot('default')\r\n            })\r\n\r\n            const placeholderText = computed(() => {\r\n                if (props.float) {\r\n                    return (\r\n                        props.placeholder ||\r\n                        props.label ||\r\n                        ctx.slots.default?.().toString()\r\n                    )\r\n                }\r\n\r\n                return props.placeholder\r\n            })\r\n\r\n            const change = (e: any) => {\r\n                model.value = e.target.value\r\n            }\r\n\r\n            const firstError = computed(() => {\r\n                const error =\r\n                    props.errors.length > 0 ? props.errors[0].$message : ''\r\n                return error.toString()\r\n            })\r\n\r\n            const sum = () => {\r\n                const value = parseInt(props.modelValue.toString()) || 0\r\n                const newValue = value + 1\r\n\r\n                if (!props.max || newValue <= props.max) {\r\n                    model.value = newValue\r\n                }\r\n            }\r\n\r\n            const subtract = () => {\r\n                const value = parseInt(props.modelValue.toString()) || 0\r\n                const newValue = value - 1\r\n\r\n                if (!props.min || newValue >= props.min) {\r\n                    model.value = newValue\r\n                }\r\n            }\r\n\r\n            return {\r\n                maxLength,\r\n                uuid,\r\n                classes,\r\n                change,\r\n                firstError,\r\n                hasSlot,\r\n                hasLabel,\r\n                placeholderText,\r\n                sum,\r\n                subtract,\r\n                style,\r\n                model\r\n            }\r\n        }\r\n    })\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n    @import './k-input.scss';\r\n</style>\r\n","<template>\r\n    <div :class=\"classes\">\r\n        <label v-if=\"hasLabel && !float\" :for=\"uuid\">\r\n            <slot v-if=\"hasSlot('default')\" />\r\n            <template v-else>{{ label }}</template>\r\n\r\n            <span v-if=\"required\" class=\"font-bold text-danger ml-1\">*</span>\r\n            <template v-if=\"firstError\">\r\n                <k-tooltip hover :title=\"firstError\">\r\n                    <k-icon icon=\"triangle-exclamation\" class=\"ml-2\" />\r\n                </k-tooltip>\r\n            </template>\r\n        </label>\r\n\r\n        <input\r\n            :id=\"uuid\"\r\n            :type=\"type\"\r\n            :maxlength=\"maxLength\"\r\n            :placeholder=\"placeholderText\"\r\n            :required=\"required\"\r\n            :value=\"model\"\r\n            :min=\"min\"\r\n            :max=\"max\"\r\n            :style=\"style\"\r\n            @input=\"change\"\r\n        />\r\n\r\n        <div v-if=\"type === 'number'\" class=\"k-input-control\">\r\n            <div @click=\"sum()\">\r\n                <k-icon icon=\"plus\" type=\"fas\" class=\"k-input-icon\" />\r\n            </div>\r\n            <div @click=\"subtract()\">\r\n                <k-icon icon=\"minus\" type=\"fas\" class=\"k-input-icon\" />\r\n            </div>\r\n        </div>\r\n\r\n        <label v-if=\"hasLabel && float\" :for=\"uuid\">\r\n            <slot v-if=\"hasSlot('default')\" />\r\n            <template v-else>{{ label || placeholder }}</template>\r\n\r\n            <span v-if=\"required\" class=\"font-bold text-danger ml-1\">*</span>\r\n\r\n            <template v-if=\"firstError\">\r\n                <k-tooltip hover :title=\"firstError\">\r\n                    <k-icon icon=\"triangle-exclamation\" class=\"ml-2\" />\r\n                </k-tooltip>\r\n            </template>\r\n        </label>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import { computed, defineComponent, PropType } from 'vue'\r\n    import { ErrorObject } from '@vuelidate/core'\r\n    import { uid } from '@/helpers/utils'\r\n\r\n    export default defineComponent({\r\n        name: 'KInput',\r\n        props: {\r\n            modelValue: {\r\n                type: [String, Number],\r\n                required: false,\r\n                default: '',\r\n                description: 'Valor del componente'\r\n            },\r\n            id: {\r\n                type: String,\r\n                required: false,\r\n                default: '',\r\n                description: 'ID único'\r\n            },\r\n            maxlength: {\r\n                type: Number,\r\n                required: false,\r\n                default: 0,\r\n                description: 'Longitud máxima'\r\n            },\r\n            placeholder: {\r\n                type: String,\r\n                required: false,\r\n                default: '',\r\n                description: 'Texto explicativo'\r\n            },\r\n            required: {\r\n                type: Boolean,\r\n                default: false,\r\n                description: 'Indica si el campo es requerido'\r\n            },\r\n            label: {\r\n                type: String,\r\n                required: false,\r\n                default: '',\r\n                description: 'Etiqueta de definición'\r\n            },\r\n            size: {\r\n                type: String,\r\n                default: 'md',\r\n                options: ['xs', 'sm', 'md', 'lg']\r\n            },\r\n            float: {\r\n                type: Boolean,\r\n                default: false,\r\n                description: 'Indica si el input tiene estilo flotante'\r\n            },\r\n            fieldset: {\r\n                type: Boolean,\r\n                default: false,\r\n                description: 'Indica si el input tiene estilo fieldset'\r\n            },\r\n            errors: {\r\n                type: Array as PropType<ErrorObject[]>,\r\n                required: false,\r\n                default: () => [],\r\n                description: 'Errores de validación'\r\n            },\r\n            status: {\r\n                type: String,\r\n                default: '',\r\n                options: ['warning', 'success', 'danger'],\r\n                description: 'Color de estado del input'\r\n            },\r\n            type: {\r\n                type: String,\r\n                default: 'text',\r\n                options: ['text', 'password', 'number', 'email']\r\n            },\r\n            width: {\r\n                type: Number,\r\n                default: 0,\r\n                description: 'Ancho del input'\r\n            },\r\n            min: {\r\n                type: Number,\r\n                required: false,\r\n                description: 'Valor mínimo si el input es `number`'\r\n            },\r\n            max: {\r\n                type: Number,\r\n                required: false,\r\n                description: 'Valor máximo si el input es `number`'\r\n            }\r\n        },\r\n        emits: ['update:modelValue'],\r\n        setup(props, ctx) {\r\n            const maxLength = props.maxlength > 0 ? props.maxlength : undefined\r\n            const uuid = props.id || uid()\r\n            const hasSlot = (name: string) => !!ctx.slots[name]\r\n\r\n            const model = computed({\r\n                get() {\r\n                    return props.modelValue\r\n                },\r\n                set(value: any) {\r\n                    ctx.emit('update:modelValue', value)\r\n                }\r\n            })\r\n\r\n            const classes = computed(() => {\r\n                const classes = ['k-input-text', `k-input-text-${props.size}`]\r\n\r\n                if (props.float) {\r\n                    classes.push('k-input-text-floating')\r\n                } else if (props.fieldset) {\r\n                    classes.push('k-input-text-fieldset')\r\n                }\r\n\r\n                if (props.type === 'number') {\r\n                    classes.push('k-input-number')\r\n                }\r\n\r\n                if (props.errors.length > 0) {\r\n                    classes.push('k-input-text-danger')\r\n                } else if (props.status) {\r\n                    classes.push(`k-input-text-${props.status}`)\r\n                }\r\n\r\n                return classes\r\n            })\r\n\r\n            const style = computed(() => {\r\n                const style: any = {}\r\n\r\n                if (props.width > 0) {\r\n                    style['width'] = props.width + 'px'\r\n                }\r\n\r\n                return style\r\n            })\r\n\r\n            const hasLabel = computed(() => {\r\n                return props.label || hasSlot('default')\r\n            })\r\n\r\n            const placeholderText = computed(() => {\r\n                if (props.float) {\r\n                    return (\r\n                        props.placeholder ||\r\n                        props.label ||\r\n                        ctx.slots.default?.().toString()\r\n                    )\r\n                }\r\n\r\n                return props.placeholder\r\n            })\r\n\r\n            const change = (e: any) => {\r\n                model.value = e.target.value\r\n            }\r\n\r\n            const firstError = computed(() => {\r\n                const error =\r\n                    props.errors.length > 0 ? props.errors[0].$message : ''\r\n                return error.toString()\r\n            })\r\n\r\n            const sum = () => {\r\n                const value = parseInt(props.modelValue.toString()) || 0\r\n                const newValue = value + 1\r\n\r\n                if (!props.max || newValue <= props.max) {\r\n                    model.value = newValue\r\n                }\r\n            }\r\n\r\n            const subtract = () => {\r\n                const value = parseInt(props.modelValue.toString()) || 0\r\n                const newValue = value - 1\r\n\r\n                if (!props.min || newValue >= props.min) {\r\n                    model.value = newValue\r\n                }\r\n            }\r\n\r\n            return {\r\n                maxLength,\r\n                uuid,\r\n                classes,\r\n                change,\r\n                firstError,\r\n                hasSlot,\r\n                hasLabel,\r\n                placeholderText,\r\n                sum,\r\n                subtract,\r\n                style,\r\n                model\r\n            }\r\n        }\r\n    })\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n    @import './k-input.scss';\r\n</style>\r\n"],"names":["_sfc_main","defineComponent","props","ctx","maxLength","uuid","uid","hasSlot","__name","name","model","computed","value","classes","style","hasLabel","placeholderText","_b","_a","change","e","firstError","newValue","_hoisted_2","_hoisted_4","_hoisted_6","_resolveComponent","_normalizeClass","_ctx","_createElementBlock","_renderSlot","_openBlock","_Fragment","_createTextVNode","_toDisplayString","_createBlock","_component_k_tooltip","_withCtx","_createVNode","_component_k_icon","_hoisted_1","_createCommentVNode","_createElementVNode","_normalizeStyle","_cache","args","_hoisted_3","$event"],"mappings":"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"}